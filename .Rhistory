}
derivative <- Deriv(func)
return(
func(x0 + d) <= func(x0) + (d * alpha * derivative(x0)
))
}
func <- function(x){
2 * x^2
}
armijoCondition(func, 2, -0.1, 0.5)
armijoCondition <- function(func, x0, d, alpha){
if(0 > alpha || alpha > 1){
stop("Alfa nie jest z przedzialu [0,1]")
}
derivative <- Deriv(func)
return(
func(x0 + d) <= func(x0) + (d * alpha * derivative(x0)
))
}
getSecondDeriv <- function(func){
firstDerivative <- Deriv(func)
secondDerivative <- Deriv(func)
return(
secondDerivative
)
}
getSecondDeriv(func)
View(func)
getSecondDeriv <- function(func){
firstDerivative <- Deriv(func)
secondDerivative <- Deriv(firstDerivative)
return(
secondDerivative
)
}
getSecondDeriv(func)
a
markings
knitr::opts_chunk$set(echo = TRUE)
library("Deriv")
data <-  read.csv("./CO.csv")
data <-  read.csv("C:/data/CO.csv")
data <-  read.csv("C:\Users\kryxk\OneDrive\Studia\Semestr V\Łączenie modeli danych\Projekt\Referat - Autokorelacja\Box-Pierce\R\CO.csv")
data <-  read.csv("C:/Users/kryxk/OneDrive/Studia/Semestr V/Łączenie modeli danych/Projekt/Referat - Autokorelacja/Box-Pierce/R/CO.csv")
test_results <- Box.test(data, lag=3)
p_value <- test_results[[3]]
p_value_treshold <- 0.05
if(p_value < p_value_treshold){
print("Wyniki testu autokorelacji Boxa-Pierce'a wskazują na występowanie autokorelacji")
}
else {
data <-  read.csv("C:/Users/kryxk/OneDrive/Studia/Semestr V/Łączenie modeli danych/Projekt/Referat - Autokorelacja/Box-Pierce/R/CO.csv")
test_results <- Box.test(data, lag=3)
p_value <- test_results[[3]]
p_value_treshold <- 0.05
if(p_value < p_value_treshold){
print("Wyniki testu autokorelacji Boxa-Pierce'a wskazują na występowanie autokorelacji");
} else {
print("Wyniki testu autokorelacji Boxa-Pierce'a wskazują na brak autokorelacji");
}
setwd("C:\\Users\\kryxk\\Repos\\nonlinear-optimization-2023")
armijoCondition <- function(func, x0, d, alpha){
if(0 > alpha || alpha > 1){
stop("Alfa nie jest z przedzialu [0,1]")
}
derivative <- Deriv(func)
return(
func(x0 + d) <= func(x0) + (d * alpha * derivative(x0))
)
}
determineStepSize <- function(funcDeriv, x){
return(
-1 * (funcDeriv[1][[1]](x)/funcDeriv[2][[1]](x))
)
}
tuneStepSize <- function(func, x0, d, alpha, rho){
while (armijoCondition(func, x0, d, alpha) == FALSE) {
d <- d * rho
}
return(rho)
}
getDerivs <- function(func){
firstDerivative <- Deriv(func)
secondDerivative <- Deriv(firstDerivative)
return(c(
firstDerivative, secondDerivative
))
}
functionValueDecreaseDirection <- function(functionDeriv, x){
if(functionDeriv[1][[1]](x) < 0){
return(1)
}
return(-1)
}
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(x.new)
}
x <- x.new
print(x)
}
}
funkcja_celu <- function(x) {
sin(x/10)*exp(-(x/10+pi)^2) - cos(x/10)*exp(-(x/10-2*pi)^2) + 0.003*(x/10)^2
}
newtonArmijo(funkcja_celu, -60, 0.5, 0.1, 0.00001)
library(Deriv)
newtonArmijo(funkcja_celu, -60, 0.5, 0.1, 0.00001)
plot(funkcja_celu, -100, 100)
newtonArmijo(funkcja_celu, -60, 0.5, 0.01, 0.00001)
newtonArmijo(funkcja_celu, -60, 0.05, 0.05, 0.00001)
newtonArmijo(funkcja_celu, -60, 0.005, 0.05, 0.00001)
functionValueDecreaseDirection <- function(functionDeriv, x){
str_interp("Wartość pierwszej pochodnej ${functionDeriv[1][[1]](x)}")
if(functionDeriv[1][[1]](x) < 0){
return(1)
}
return(-1)
}
newtonArmijo(funkcja_celu, -60, 0.005, 0.05, 0.00001)
newtonArmijo(funkcja_celu, -55, 0.005, 0.05, 0.00001)
functionValueDecreaseDirection <- function(functionDeriv, x){
print(str_interp("Wartość pierwszej pochodnej ${functionDeriv[1][[1]](x)}"))
if(functionDeriv[1][[1]](x) < 0){
return(1)
}
return(-1)
}
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x) >= 0}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(x.new)
}
x <- x.new
print(x)
}
}
newtonArmijo(funkcja_celu, -55, 0.005, 0.05, 0.00001)
install.packages("interp")
library(interp)
newtonArmijo(funkcja_celu, -55, 0.005, 0.05, 0.00001)
library(stringr)
newtonArmijo(funkcja_celu, -55, 0.005, 0.05, 0.00001)
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x)}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(x.new)
}
x <- x.new
print(x)
}
}
newtonArmijo(funkcja_celu, -55, 0.005, 0.05, 0.00001)
newtonArmijo(funkcja_celu, 55, 0.005, 0.05, 0.00001)
functionValueDecreaseDirection <- function(functionDeriv, x){
print(str_interp("Wartość pierwszej pochodnej ${functionDeriv[1][[1]](x)}"))
if(functionDeriv[1][[1]](x) < 0){
return(-1)
}
return(1)
}
newtonArmijo(funkcja_celu, 55, 0.005, 0.05, 0.00001)
newtonArmijo(funkcja_celu, 55, 0.005, 0.05, 0.1)
functionValueDecreaseDirection <- function(functionDeriv, x){
print(str_interp("Wartość pierwszej pochodnej ${functionDeriv[1][[1]](x)}"))
if(functionDeriv[1][[1]](x) < 0){
return(-1)
}
return(1)
}
newtonArmijo(funkcja_celu, 55, 0.005, 0.05, 0.1)
newtonArmijo(funkcja_celu, 50, 0.005, 0.05, 0.1)
newtonArmijo(funkcja_celu, 50, 0.5, 0.05, 0.1)
newtonArmijo(funkcja_celu, -55, 0.5, 0.05, 0.1)
newtonArmijo(funkcja_celu, -55, 0.5, 0.05, 0.01)
newtonArmijo(funkcja_celu, -55, 0.5, 0.05, 0.09)
newtonArmijo(funkcja_celu, -55, 0.5, 0.05, 0.08)
newtonArmijo(funkcja_celu, -55, 0.5, 0.05, 0.07)
newtonArmijo(funkcja_celu, -55, 0.5, 0.05, 0.06)
newtonArmijo(funkcja_celu, -55, 0.5, 0.05, 0.05)
newtonArmijo(funkcja_celu, -55, 0.5, 0.05, 0.04)
newtonArmijo(funkcja_celu, -55, 0.5, 0.1, 0.04)
newtonArmijo(funkcja_celu, -55, 0.5, 0.1, 0.05)
tuneStepSize <- function(func, x0, d, alpha, rho){
while (armijoCondition(func, x0, d, alpha) == FALSE) {
d <- d * rho
}
return(d)
}
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x)}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(x.new)
}
x <- x.new
print(x)
}
}
newtonArmijo(funkcja_celu, -55, 0.5, 0.1, 0.05)
funkcja_celu(-53.84929)
newtonArmijo(funkcja_celu, 50, 0.5, 0.1, 0.05)
newtonArmijo(funkcja_celu, -55, 0.5, 0.2, 0.1)
newtonArmijo(funkcja_celu, 50, 0.5, 0.2, 0.1)
newtonArmijo(funkcja_celu, 50, 0.9, 0.2, 0.1)
newtonArmijo(funkcja_celu, 50, 0.8, 0.2, 0.1)
newtonArmijo(funkcja_celu, 50, 0.9, 0.1, 0.1)
newtonArmijo(funkcja_celu, 51, 0.9, 0.1, 0.1)
newtonArmijo(funkcja_celu, 53, 0.9, 0.1, 0.1)
newtonArmijo(funkcja_celu, 54, 0.9, 0.1, 0.1)
funkcja_celu(54)
newtonArmijo(funkcja_celu, 54, 0.9, 0.1, 0.01)
newtonArmijo(funkcja_celu, 55, 0.9, 0.1, 0.01)
newtonArmijo(funkcja_celu, 55, 0.1, 0.1, 0.01)
newtonArmijo(funkcja_celu, 55, 0.2, 0.1, 0.01)
newtonArmijo(funkcja_celu, 55, 0.2, 0.01, 0.01)
newtonArmijo(funkcja_celu, 90, 0.2, 0.01, 0.01)
funkcja_celu(62)
plot(funkcja_celu, 44, 48)
newtonArmijo(funkcja_celu, 46, 0.15, 0.01, 0.01)
newtonArmijo(funkcja_celu, 50, 0.15, 0.01, 0.01)
newtonArmijo(funkcja_celu, -55, 0.15, 0.01, 0.01)
results <- data.frame(colnames = c("x*", "y*", "liczba wywołań funkcji celu"))
View(results)
results <- data.frame(colnames("x*", "y*", "liczba wywołań funkcji celu"))
results <- data.frame(colnames(c("x*", "y*", "liczba wywołań funkcji celu")))
View(results)
rbind(results, c(1,2,3))
results <- data.frame()
colnames(results) <- c("x*", "y*", "liczba wywołań funkcji celu")
results <- data.frame(x = numeric(), y = numeric(), num_calls = numeric())
colnames(results) <- c("x*", "y*", "liczba wywołań funkcji celu")
View(results)
for(point in points){
print(point)
}
for(point in 1:length(points)){
print(point)
}
for(fuckin_point in points){
print(fuckin_point)
}
points <- c(
-79,  58, -21, -55, -64,  -7, -82,  49,  81,  11, -46, -28,  70, -31, -83,
-1,  52, -14, -29,  57,  94, -67, -28,  61, -83,  41,   5,  -4, -69, 100,
-47,  43,  79,  26,  41,  51, -77,  -8 -42,  77, 100, -44, -71, -46, -14,
-51,  -5, -41, -20, -32,  42, -47,  62,  -1, -74,  73 -32, -28,  -2, 6, 34,
-94,  21, -48 -60, -13 -18, 5, 77,  74, -78 -57, -77, -28,  82, -83 -70, -32,
6,  96,  81,  46,  48,  73,  55,   8,  55,   4,  14,  59,   0,  43 -65, -78,
-15, -80, -53,  78,  85,  71)
for(fuckin_point in points){
print(fuckin_point)
}
rbind(results, c(1,2,3))
newtonArmijo <- function(func, x, alpha, rho, tolerance){
function_calls <- 0
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x)}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(x.new)
}
x <- x.new
y <- func(x)
return(c(x, y, function_calls))
}
}
newtonArmijo(funkcja_celu, -55, 0.15, 0.01, 0.01)
armijoCondition <- function(func, x0, d, alpha){
if(0 > alpha || alpha > 1){
stop("Alfa nie jest z przedzialu [0,1]")
}
derivative <- Deriv(func)
function_calls <<- function_calls + 2
return(
func(x0 + d) <= func(x0) + (d * alpha * derivative(x0))
)
}
newtonArmijo(funkcja_celu, -55, 0.15, 0.01, 0.01)
function_calls <- 0
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x)}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(x.new)
}
x <- x.new
y <- func(x)
return(c(x, y, function_calls))
}
}
newtonArmijo(funkcja_celu, -55, 0.15, 0.01, 0.01)
newtonArmijo(funkcja_celu, 50, 0.15, 0.01, 0.01)
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x)}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(x.new)
}
x <- x.new
y <- func(x)
return(c(x, y, function_calls))
}
}
newtonArmijo(funkcja_celu, 50, 0.15, 0.01, 0.01)
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x)}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(x.new)
}
x <- x.new
y <- func(x)
return(c(x, y, function_calls))
}
}
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x)}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(c(x.new, func(x.new), function_calls))
}
x <- x.new
y <- func(x)
return(c(x, y, function_calls))
}
}
function_calls <- 0
newtonArmijo(funkcja_celu, 50, 0.15, 0.01, 0.01)
for(point in points){
function_calls <- 0
results <- rbind(results, newtonArmijo(funkcja_celu, point, 0.15, 0.01, 0.01))
}
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
#print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x)}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(c(x.new, func(x.new), function_calls))
}
x <- x.new
y <- func(x)
return(c(x, y, function_calls))
}
}
results <- data.frame(x = numeric(), y = numeric(), num_calls = numeric())
for(point in points){
function_calls <- 0
results <- rbind(results, newtonArmijo(funkcja_celu, point, 0.15, 0.01, 0.01))
}
functionValueDecreaseDirection <- function(functionDeriv, x){
#print(str_interp("Wartość pierwszej pochodnej ${functionDeriv[1][[1]](x)}"))
if(functionDeriv[1][[1]](x) < 0){
return(-1)
}
return(1)
}
newtonArmijo <- function(func, x, alpha, rho, tolerance){
funcDerivative <- getDerivs(func)
x.new <- x
repeat{
#print(str_interp("Druga pochodna: ${funcDerivative[2][[1]](x)}"))
if(funcDerivative[2][[1]](x) >= 0){
d <- determineStepSize(funcDerivative, x)
}
else{
d <- 1 * functionValueDecreaseDirection(funcDerivative, x)
}
d <- tuneStepSize(func, x, d, alpha, rho)
x.new <- x + d
if(abs(x.new - x) < tolerance){
return(c(x.new, func(x.new), function_calls))
}
x <- x.new
y <- func(x)
return(c(x, y, function_calls))
}
}
results <- data.frame(x = numeric(), y = numeric(), num_calls = numeric())
for(point in points){
function_calls <- 0
results <- rbind(results, newtonArmijo(funkcja_celu, point, 0.15, 0.01, 0.01))
}
results <- data.frame(x = numeric(), y = numeric(), num_calls = numeric())
for(point in points){
print("Punkt ", point)
function_calls <- 0
results <- rbind(results, newtonArmijo(funkcja_celu, point, 0.15, 0.01, 0.01))
}
for(point in points){
print(str_interp("Punkt ${point}"))
function_calls <- 0
results <- rbind(results, newtonArmijo(funkcja_celu, point, 0.15, 0.01, 0.01))
}
View(results)
results <- data.frame(x = numeric(), y = numeric(), num_calls = numeric())
points <- c(
-79,  58, -21, -55, -64,  -7, -82,  49,  81,  11, -46, -28,  70, -31, -83,
-1,  52, -14, -29,  57,  94, -67, -28,  61, -83,  41,   5,  -4, -69, 100,
-47,  43,  79,  26,  41,  51, -77,  -8 -42,  77, 100, -44, -71, -46, -14,
-51,  -5, -41, -20, -32,  42, -47,  62,  -1, -74,  73 -32, -28,  -2, 6, 34,
-94,  21, -48 -60, -13 -18, 5, 77,  74, -78 -57, -77, -28,  82, -83 -70, -32,
6,  96,  81,  46,  48,  73,  55,   8,  55,   4,  14,  59,   0,  43 -65, -78,
-15, -80, -53,  78,  85,  71, 44, -36,  18,  89, -56, -14, -84)
for(point in points){
print(str_interp("Punkt ${point}"))
function_calls <- 0
results <- rbind(results, newtonArmijo(funkcja_celu, point, 0.15, 0.01, 0.01))
}
View(results)
write.csv(results, "newton_armijo_results.csv")
